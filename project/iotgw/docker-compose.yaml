version: "3"

services:

  traefik:
    image: traefik:2.9
    # Enables the web UI and tells Traefik to listen to docker
    command:
      # Configuration
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # Entrypoints
      - "--entrypoints.mqtt.address=:1883"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    restart: always
    ports:
      - 80:80       # The HTTP and HTTPS port
      - 443:443
      - 8080:8080   # The Web UI (enabled by --api.insecure=true)
      - 1883:1883   # MQTT
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      homepage.group: IoT Gateway Core
      homepage.name: Traefik Dashboard
      homepage.icon: traefik.png
      homepage.href: http://${IOTGW_HOSTNAME}:8080/
      homepage.description: Traefik dashboard


  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    volumes:
      - ./configs/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    labels:
      traefik.enable: true
      traefik.http.routers.homepage.rule: PathPrefix(`/`)
      traefik.http.routers.homepage.entrypoints: web
      traefik.http.services.homepage.loadbalancer.server.port: 3000

      # nodered ui
      homepage.group: Applications
      homepage.name: Gateway Dashboard
      homepage.icon: node-red.png
      homepage.href: http://${IOTGW_HOSTNAME:-localhost}/ui/
      homepage.description: IoT Gateway Dashboard


  mosquitto:
    image: eclipse-mosquitto
    restart: always
    volumes:
      - ./configs/mosquitto:/mosquitto/config:ro
    labels:
      traefik.enable: true
      traefik.tcp.services.mosquitto.loadbalancer.server.port: 1883
      traefik.tcp.routers.mosquitto.entrypoints: mqtt
      traefik.tcp.routers.mosquitto.service: mosquitto
      traefik.tcp.routers.mosquitto.rule: HostSNI(`*`)
      homepage.group: IoT Gateway Core
      homepage.name: Mosquitto
      homepage.icon: mqtt.png
      homepage.description: Local MQTT Broker


  telegraf:
    image: telegraf
    restart: always
    volumes:
      - ./configs/telegraf:/etc/telegraf:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      HOSTIP: ${IOTGW_HOSTNAME:-localhost}
      ROOM: ${IOTGW_ROOM:-home}
      DEPARTMENT: ${IOTGW_DEPARTMENT}
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
    labels:
      homepage.group: IoT Gateway Core
      homepage.name: Telegraf
      homepage.icon: telegraf.png
      homepage.description: System Metrics


  theengs:
    image: theengs/gateway
    restart: always
    environment:
      MQTT_HOST: mosquitto
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      MQTT_PUB_TOPIC: gateway/ble
#       MQTT_SUB_TOPIC: home/TheengsGateway/commands
      PUBLISH_ALL: true
#       TIME_BETWEEN: 60
#       SCAN_TIME: 60
      LOG_LEVEL: INFO
      DISCOVERY: false
#      DISCOVERY_TOPIC: gateway/homeassistant/sensor
#       DISCOVERY_DEVICE_NAME: TheengsGateway
#      DISCOVERY_FILTER: "[IBEACON]"  # GAEN,MS-CDP
#       SCANNING_MODE: active
      ADAPTER: ${IOTGW_BLE_ADAPTER:-hci0}
    volumes:
      - /var/run/dbus:/var/run/dbus
    labels:
      homepage.group: IoT Gateway Core
      homepage.name: Theengs Gateway
      homepage.icon: https://raw.githubusercontent.com/namakanyden/Open-IoT-Gateway/main/doc/icons/theengs.png
      homepage.description: BLE2MQTT Gateway


  chrony:
    image: cturra/ntp
    restart: always
    ports:
      - 123:123/udp
    environment:
      NTP_SERVERS: ${IOTGW_NTP_SERVERS:-time.cloudflare.com}
      LOG_LEVEL: 0
    labels:
      homepage.group: IoT Gateway Core
      homepage.name: Chrony
      homepage.icon: https://raw.githubusercontent.com/namakanyden/Open-IoT-Gateway/main/doc/icons/chrony.png
      homepage.description: NTP Server


  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    labels:
      homepage.group: IoT Gateway Core
      homepage.name: Watchtower
      homepage.icon: https://containrrr.dev/watchtower/images/logo-450px.png
      homepage.description: Automates Docker container base image updates.


  nodered:
    image: nodered/node-red
    restart: always
    ports:
    - 1880:1880
    volumes:
    - nodered_data:/data
    labels:
      # homepage setup
      homepage.group: Services
      homepage.name: Node-RED
      homepage.icon: node-red.png
      homepage.href: http://${IOTGW_HOSTNAME}/nodered/
      homepage.description: Node-RED

      # traefik setup
      traefik.enable: true
      traefik.http.services.nodered.loadbalancer.server.port: 1880

      # middleware
      traefik.http.middlewares.nodered-rewrite.replacepathregex.regex: "^/nodered/(.*)"
      traefik.http.middlewares.nodered-rewrite.replacepathregex.replacement: "/$$1"

      # routers
      traefik.http.routers.nodered.entrypoints: web
      traefik.http.routers.nodered.rule: PathPrefix(`/nodered/`)
      traefik.http.routers.nodered.middlewares: "nodered-rewrite"


volumes:
  portainer_data:
  nodered_data:

networks:
  # all containers will be by default connected to network iotgw
  default:
    name: iotgw
    external: true
