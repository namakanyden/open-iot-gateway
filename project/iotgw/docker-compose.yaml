version: "2.4"

services:
  provisioning:
    build:
      context: provisioning
        #    image: alpine
    restart: no
    command: [ "env" ]

  homepage:
    build:
      context: homepage
    # image: ghcr.io/gethomepage/homepage:latest
    # volumes:
    #   - ./configs/homepage:/app/config
    #   - ./configs/homepage/images:/app/public/images
    #   - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    ports:
      - 80:3000
    labels:
      io.balena.features.balena-socket: "1"

  mosquitto:
    build:
      context: mosquitto
    restart: always
    # env_file:
    #   - .env
    #     volumes:
    #       - ./configs/mosquitto:/mosquitto/config:ro
    ports:
      - 1883:1883
  #     labels:
  #       # traefik.enable: true
  #       # traefik.tcp.services.mosquitto.loadbalancer.server.port: 1883
  #       # traefik.tcp.routers.mosquitto.entrypoints: mqtt
  #       # traefik.tcp.routers.mosquitto.service: mosquitto
  #       # traefik.tcp.routers.mosquitto.rule: HostSNI(`*`)
  #       homepage.group: IoT Gateway Core
  #       homepage.name: Mosquitto
  #       homepage.icon: mqtt.png
  #       homepage.description: Local MQTT Broker

  telegraf:
    build:
      context: telegraf
    # image: telegraf:alpine
    restart: always
    depends_on:
      - mosquitto
    # env_file:
    #   - .env
    user: telegraf:991
    #     volumes:
    #       - ./configs/telegraf:/etc/telegraf:ro
    #       - /var/run/docker.sock:/var/run/docker.sock
    #       - /:/hostfs:ro
    #     environment:
    #       - HOSTNAME=${IOTGW_HOSTNAME:-localhost}
    #       - HOSTIP=${IOTGW_HOSTIP:-127.0.0.1}
    #       - ROOM=${IOTGW_ROOM:-home}
    #       - DEPARTMENT=${IOTGW_DEPARTMENT}
    #       - MQTT_USERNAME=${MQTT_USERNAME}
    #       - MQTT_PASSWORD=${MQTT_PASSWORD}
    #       - TZ=${TIMEZONE}
    #       - HOST_ETC=/hostfs/etc
    #       - HOST_PROC=/hostfs/proc
    #       - HOST_SYS=/hostfs/sys
    #       - HOST_VAR=/hostfs/var
    #       - HOST_RUN=/hostfs/run
    #       - HOST_MOUNT_PREFIX=/hostfs
    labels:
      io.resin.features.balena-socket: "1"
  #       homepage.group: IoT Gateway Core
  #       homepage.name: Telegraf
  #       homepage.icon: telegraf.png
  #       homepage.description: System Metrics

  theengs:
    build:
      context: theengs
    restart: always
    depends_on:
      - mosquitto
    # env_file:
    #   - .env
    environment:
      MQTT_PUB_TOPIC: gateway/ble
      # MQTT_SUB_TOPIC: home/TheengsGateway/commands
      PUBLISH_ALL: true
      # TIME_BETWEEN: 60
      # SCAN_TIME: 60
      LOG_LEVEL: INFO
      DISCOVERY: false
      # DISCOVERY_TOPIC: gateway/homeassistant/sensor
      # DISCOVERY_DEVICE_NAME: TheengsGateway
      # DISCOVERY_FILTER: "[IBEACON]"  # GAEN,MS-CDP
      # SCANNING_MODE: active
      # ADAPTER: hci0
      #     volumes:
      #       - /var/run/dbus:/var/run/dbus
      DBUS_SYSTEM_BUS_ADDRESS: unix:path=/host/run/dbus/system_bus_socket
    labels:
      io.balena.features.dbus: 1

  chrony:
    image: cturra/ntp
    restart: always
    ports:
      - 123:123/udp
    # environment:
    #   LOG_LEVEL: 0

  #   watchtower:
  #     image: containrrr/watchtower
  #     volumes:
  #       - /var/run/docker.sock:/var/run/docker.sock
  #     restart: always
  #     labels:
  #       homepage.group: IoT Gateway Core
  #       homepage.name: Watchtower
  #       homepage.icon: /images/watchtower.png
  #       homepage.description: Automates Docker container base image updates.

  nodered:
    build:
      context: nodered
    # image: nodered/node-red:latest-minimal
    restart: always
    ports:
      - 1880:1880
    volumes:
      - nodered_data:/data
    depends_on:
      - mosquitto
    # environment:
    #       # - HOSTIP=${IOTGW_HOSTIP:-127.0.0.1}
    # - TZ=${IOTGW_TIMEZONE}
    # labels:
    #   io.balena.features.supervisor-api: 1
    # homepage.group: Services
    # homepage.name: Node-RED
    #   homepage.icon: node-red.png
    #   homepage.href: "http://${IOTGW_HOSTIP}:1880"
    #   homepage.description: Node-RED

  zigbee2mqtt:
    # env_file:
    #   - .env
    build:
      context: zigbee2mqtt
    # restart: always
    ports:
      - 8080:8080
    depends_on:
      - mosquitto
    privileged: true
    volumes:
      - zigbee2mqtt_data:/app/data/
    environment:
      DBUS_SYSTEM_BUS_ADDRESS: unix:path=/host/run/dbus/system_bus_socket
    #   - TZ=Europe/Bratislava
    labels:
      io.balena.features.dbus: 1
    # devices:
    #   - ${IOTGW_ZIGBEE_ADAPTER:-/dev/ttyUSB0}:/dev/ttyUSB0
    # labels:
    #   # homepage setup
    #   homepage.group: Services
    #   homepage.name: Zigbee2MQTT
    #   homepage.icon: zigbee2mqtt.png
    #   homepage.href: http://${HOSTIP:-localhost}/zigbee2mqtt/
    #   homepage.description: Zigbee to MQTT bridge

    #   # traefik setup
    #   traefik.enable: true
    #   traefik.http.services.zb2mqtt.loadbalancer.server.port: 8080

    #   # middleware
    #   traefik.http.middlewares.zb2mqtt-rewrite.replacepathregex.regex: "^/zigbee2mqtt/(.*)"
    #   traefik.http.middlewares.zb2mqtt-rewrite.replacepathregex.replacement: "/$$1"

    #   # routers
    #   traefik.http.routers.zb2mqtt.entrypoints: web
    #   traefik.http.routers.zb2mqtt.rule: PathPrefix(`/zigbee2mqtt/`)
    #   traefik.http.routers.zb2mqtt.middlewares: "zb2mqtt-rewrite"

volumes:
  nodered_data:
  zigbee2mqtt_data:
# networks:
#   # all containers will be by default connected to network iotgw
#   default:
#     name: iotgw
#     external: true
